테이블 연관관계
ui (어떻게 동작되는지 1구간정도)
기능 1~2개 (back + front 나눠서)
디테일 1~2개 정도
디자인패턴
mvc패턴 +util  
폴더개수 권장은 3개로 사용

백엔드
1. api
2. rest
3. 토큰, OAuth2

백
1. mpa/api
pc통신시절에는 화면의 종류가 적기에 mpa방식을 사용했으나 스마트폰의 보급으로인해 화면비율이 엄청나게 다양해져 서버에서 모든 비율에 대한 처리를 하면 서버에 부담이 커지기에 서버에선 내용만 보내주고 프론트에서 화면을 구성하는 방식인 api방식을 사용하게됨 
2. rest/GraphQL/gRPC
rest는 가장 표준적이고 단순하며 추후설명할 리액트와의 연계성이 뛰어남
3. 세션 / 토큰 / OAuth2
OAuth2는 카카오 api를 사용하기위해 강제로 필요하기에 넘기고
세션은 단순하지만 상태를 저장해 직접관리해야되기에 확장성에 불리하다.
그에비해 토큰방식은 저장소없이 토큰자체만 검증하면되는 무상태 방식이며 확장성이 좋다.
4. JWT/Opaque Token/Refresh Token
 {질문대비용 : 오페이크 토큰은 랜덤문자열로서 보안은 좋지만 세션과 비슷하게 서버상태관리가 필요하기에 확장성에 약하다.} 
JWT (JSON Web Token) 토큰자체에 사용자 정보와 서명이 들어있음 api서버 구조와 호환이 좋으며 무상태방식으로 확장성에 용의하다. 다만 탈취위험이 크다는 단점이 있는데 이것을 Refresh Token을 추가하여 일정시간이 지날때마다 토큰을 초기화시켜주는 방식으로 최대한 방어하였다.

프론트
1. MPA/SPA
MPA 방식은 JSP나 XML 기반 템플릿을 사용해 화면을 구성했는데, 이는 설정이 복잡하고 프론트와 백엔드 코드가 뒤섞여 협업과 유지보수에 불리했습니다. 또한 서버가 모든 화면을 처리해야 하므로 서버 부하가 크게 걸리는 문제도 있었습니다. 반면 SPA 방식은 다양한 기기에 유연하게 대응할 수 있고, 앱처럼 부드러운 화면 전환과 높은 확장성을 제공하기 때문에 결국 SPA 방식을 선택하게 되었습니다
2. react, vue, angular 
3. vite, next.js

4. js, jsx, ts, tsx

폴더구조
1. 



